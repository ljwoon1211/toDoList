{"version":3,"file":"static/js/108.bb15baca.chunk.js","mappings":"4KAiB0BA,EAAAA,EAAAA,IAAK,CAC7BC,IAAK,SACLC,SAAS,IAFJ,MAKMC,GAAYH,EAAAA,EAAAA,IAAqB,CAC5CC,IAAK,OACLC,SAASE,EAAAA,EAAAA,GAAqB,OAAQ,IACtCC,QAAS,CACPC,IAAgB,IAAf,MAAEC,GAAOD,EACRC,GAAOC,KACLC,EAAAA,EAAAA,GAAmB,OAAQD,EAAK,GAChC,KAKKE,GAAeC,EAAAA,EAAAA,IAAS,CACnCV,IAAK,eACLW,IAAKC,IAAc,IAAb,IAAED,GAAKC,EACX,MAAMC,EAAQF,EAAIT,GACZY,EAAWH,EAAII,GAIrB,OAAOF,EAAMG,QAAQT,GAASA,EAAKO,WAAaA,GAAS,IAIhDC,GAAgBhB,EAAAA,EAAAA,IAAiB,CAC5CC,IAAK,WACLC,QAASgB,EAAAA,EAAWC,Q,sBC3CP,SAASC,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,IAAkBnB,GAC7BY,GAAWQ,EAAAA,EAAAA,IAA2BP,IACtC,SAACQ,EAAQ,aAAEC,EAAY,SAAEC,IAAYC,EAAAA,EAAAA,MAO3C,OAEEC,EAAAA,EAAAA,MAAA,QAAMC,SAAUJ,GAREnB,IAAqB,IAApB,KAACE,GAAcF,EAClCwB,QAAQC,IAAI,YAAavB,GACzBa,GAAUW,GAAS,CAAC,CAACC,GAAGD,EAAKE,OAAOC,KAAM3B,EAAMO,eAAaiB,KAE7DN,EAAS,OAAO,GAAG,IAIuBU,SAAA,EACxCC,EAAAA,EAAAA,KAAA,YACMb,EAAS,OAAO,CAClBc,SAAS,wBAEXC,YAAY,mBAEdF,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,UAGd,CCvBe,SAASI,EAAIlC,GAAkC,IAAjC,KAAC6B,EAAI,SAACpB,EAAQ,GAACkB,GAAgB3B,EAC1D,MAAMe,GAASC,EAAAA,EAAAA,IAAkBnB,GAG3BsC,IADkBlB,EAAAA,EAAAA,IAAeP,IACpBO,EAAAA,EAAAA,IAAemB,EAAAA,IAG5BC,EAASC,IACb,MAAOC,eAAc,KAACC,IAASF,EAC/Bd,QAAQC,IAAI,WACZV,GAAUW,IACR,MAAMe,EAAcf,EAAKgB,WAAUxC,GAAQA,EAAKyB,KAAOA,IACjDgB,EAAU,CAAEd,OAAMF,KAAIlB,SAAU+B,GAEtC,MAAO,IAAId,EAAKkB,MAAM,EAAEH,GAAcE,KAAWjB,EAAKkB,MAAMH,EAAY,GAAI,GAC5E,EAEH,OACCnB,EAAAA,EAAAA,MAAA,MAAAQ,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAAD,SAAOD,IACNM,EACExB,QAAQkC,GAAQA,IAAQpC,IACxBqC,KAAKD,IACNd,EAAAA,EAAAA,KAAA,UAAkBS,KAAMK,EAAKR,QAASA,EAAQP,SAC3Ce,GADUA,OAUrB,C,aC7Be,SAASE,IAGtB,MAAMvC,GAAQS,EAAAA,EAAAA,IAAeb,IACtBK,EAAUuC,IAAeC,EAAAA,EAAAA,IAAevC,GACzCyB,GAAalB,EAAAA,EAAAA,IAAemB,EAAAA,GAMlC,OACEd,EAAAA,EAAAA,MAAA,OAAAQ,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UAAQmB,MAAQzC,EAAU0C,QAPbb,IACfU,EAAYV,EAAMC,cAAcW,MAAa,EAMApB,SACxCK,EAAWW,KAAIrC,IACdsB,EAAAA,EAAAA,KAAA,UAAuBmB,MAAOzC,EAASqB,SAAErB,GAA5BA,QAIjBsB,EAAAA,EAAAA,KAACqB,EAAAA,GAAI,CAACC,GAAI,cAAcvB,SAAC,qBAEzBC,EAAAA,EAAAA,KAACjB,EAAU,IACL,OAALN,QAAK,IAALA,OAAK,EAALA,EAAOsC,KAAI5C,IAAQ6B,EAAAA,EAAAA,KAACG,EAAI,IAAmBhC,GAAbA,EAAKyB,QAwB1C,C,+DCrDO,IAAKf,EAAU,SAAVA,GAAU,OAAVA,EAAU,cAAVA,EAAU,cAAVA,EAAU,YAAVA,CAAU,MAMf,MAAMwB,GAAkB1C,EAAAA,EAAAA,IAAe,CAC5CC,IAAK,kBACLC,SAASE,EAAAA,EAAAA,GAAqB,kBAAmB,CAACc,EAAWC,MAAOD,EAAW0C,MAAO1C,EAAW2C,OACjGxD,QAAS,CACPC,IAAgB,IAAf,MAAEC,GAAOD,EACRC,GAAOQ,KACLN,EAAAA,EAAAA,GAAmB,kBAAmBM,EAAS,GAC/C,I,yCChBD,MAAMN,EAAqBA,CAACR,EAAauD,KAC9CM,aAAaC,QAAQ9D,EAAK+D,KAAKC,UAAUT,GAAO,EAGrCpD,EAAuBA,CAAIH,EAAaiE,KACnD,MAAMC,EAAcL,aAAaM,QAAQnE,GACzC,OAAOkE,EAAcH,KAAKK,MAAMF,GAAeD,CAAY,C","sources":["recoil/atoms/atoms.ts","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","recoil/atoms/categories.ts","utils/localStorage.ts"],"sourcesContent":["import { atom, selector } from \"recoil\";\nimport { Categories } from \"./categories\";\nimport { loadFromLocalStorage, saveToLocalStorage } from '../../utils/localStorage';\n\n\n\nexport interface FormData {\n  toDo: string\n}\n\nexport interface ToDoFormData {\n  id: number,\n  text: string,\n  category: Categories,\n}\n\n\nexport const isDarkAtom = atom({\n  key: \"isDark\",\n  default: false\n})\n\nexport const toDoState = atom<ToDoFormData[]>({\n  key: \"toDo\",\n  default: loadFromLocalStorage(\"toDo\", []),\n  effects: [\n    ({ onSet }) => {\n      onSet((toDo) => {\n        saveToLocalStorage(\"toDo\", toDo); // 상태 변경 시 로컬스토리지에 저장\n      });\n    },\n  ],\n})\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    // if (category === \"TO_DO\") return toDos.filter((todo) => todo.category === \"TO_DO\")\n    // if (category === \"DOING\") return toDos.filter((todo) => todo.category === \"DOING\")\n    // if (category === \"DONE\") return toDos.filter((todo) => todo.category === \"DONE\")\n    return toDos.filter((toDo) => toDo.category === category)\n  },\n})\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TO_DO,\n})","import { useForm } from \"react-hook-form\"\nimport { useRecoilValue, useSetRecoilState } from \"recoil\"\nimport {  categoryState, FormData, toDoState } from \"../recoil/atoms/atoms\"\nimport { Categories } from \"../recoil/atoms/categories\"\n\nexport default function CreateToDo(){\n  const setToDos = useSetRecoilState(toDoState)\n  const category = useRecoilValue<Categories>(categoryState)\n  const {register, handleSubmit, setValue} = useForm<FormData>()\n  const handleValid = ({toDo}:FormData) =>{\n    console.log('add to do', toDo)\n    setToDos((prev) => [{id:prev.length,text: toDo ,category},...prev])\n\n    setValue(\"toDo\",\"\")\n  }\n  return (\n\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input \n        {...register(\"toDo\",{\n          required:\"Please write a toDo\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  )\n}","import { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport {  categoryState, ToDoFormData, toDoState } from \"../recoil/atoms/atoms\";\nimport { Categories, categoriesState } from \"../recoil/atoms/categories\";\n\nexport default function ToDo({text,category,id}:ToDoFormData){\n  const setToDos=useSetRecoilState(toDoState)\n\n  const currentCategory = useRecoilValue(categoryState)\n  const categories = useRecoilValue(categoriesState)\n\n\n  const onClick=(event:React.MouseEvent<HTMLButtonElement>)=>{\n    const {currentTarget:{name}} = event\n    console.log('onClick')\n    setToDos((prev)=> {\n      const targetIndex = prev.findIndex(toDo => toDo.id === id)\n      const newToDo = { text, id, category: name as any };\n\n      return [...prev.slice(0,targetIndex), newToDo,...prev.slice(targetIndex+1) ];\n    })\n  }\n   return(\n    <li>\n      <span>{text}</span>\n      {categories\n        .filter((cat) => cat !== category) \n        .map((cat) => (                    \n        <button key={cat} name={cat} onClick={onClick}>\n          {cat}\n        </button>\n      ))}\n      {/* { category !== Categories.DOING && <button name={Categories.DOING} onClick={onClick}>Doing</button> }\n      { category !== Categories.TO_DO && <button name={Categories.TO_DO} onClick={onClick}>To Do</button> }\n      { category !== Categories.DONE && <button name={Categories.DONE} onClick={onClick}>Done</button> } */}\n    </li>\n   )\n  \n}","\nimport { useRecoilState, useRecoilValue,  } from \"recoil\";\nimport { categoryState, toDoSelector, toDoState } from \"../recoil/atoms/atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\nimport { Link } from \"react-router-dom\";\nimport { Categories, categoriesState } from \"../recoil/atoms/categories\";\n\nexport default function ToDoList(){\n  // const toDos = useRecoilValue(toDoState)\n  // console.log(toDos)\n  const toDos = useRecoilValue(toDoSelector)\n  const [category, setCategory] = useRecoilState(categoryState)\n  const categories = useRecoilValue(categoriesState)\n\n\n  const onInput = (event : React.FormEvent<HTMLSelectElement>)=> {\n    setCategory(event.currentTarget.value as any)\n  }\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr/>\n      <select value= {category} onInput={onInput}>\n        {categories.map(category => \n          <option key={category} value={category}>{category}</option>\n        )}\n      </select>\n\n      <Link to={\"/categories\"}> Edit Category </Link>\n\n      <CreateToDo />\n      {toDos?.map(toDo => <ToDo key={toDo.id} {...toDo}/>)}\n      {/* <h2>To Do</h2>\n      <ul>\n        {toDo.map(toDo =>(\n          <ToDo key={toDo.id} {...toDo}/>\n        ))}\n      </ul>\n      <hr/>\n      <h2>Doing</h2>\n      <ul>\n        {doing.map(doing =>(\n          <ToDo key={doing.id} {...doing}/>\n        ))}\n      </ul>\n      <hr/>   \n      <h2>Done</h2>\n      <ul>\n        {done.map(done =>(\n          <ToDo key={done.id} {...done}/>\n        ))}\n      </ul>\n      <hr/> */}\n    </div>\n  )\n}\n\n// interface FormData {\n//   email: string;\n//   firstName: string;\n//   lastName: string;\n//   username: string;\n//   password: string;\n//   password1: string;\n//   extraError?:string;\n// }\n\n\n// export default function ToDoList(){\n//   const {register, watch, handleSubmit, formState:{errors}, setError} = useForm<FormData>({\n//     defaultValues:{\n//       email:\"@naver.com\"\n//     }\n//   })\n//   const onValid = (data:FormData)=>{\n//     console.log(data)\n//     // handleSubmit submit 이벤트가 일어났을 시 값을 객체로 보여준다.\n//     if(data.password !== data.password1){\n//       setError(\"password1\",\n//         {message: \"Password are not the same\"},\n//         {shouldFocus: true}\n//       )\n//     }\n//     setError(\"extraError\",{message: \"Server offline\"})\n//   }\n//   console.log(errors) \n//   // 에러 종류 보여줌\n//   console.log(register(\"email\"))\n//   // register는 input에 일어나는 이벤트 onChange, onClick, onBlur 등을 보여줌\n//   console.log(watch())\n//   // watch form안에 변하는 값을 보여줌\n\n//   return (\n//     <div>\n//       <form \n//         style={{display:\"flex\", flexDirection:\"column\",}}\n//       onSubmit={handleSubmit(onValid)}>\n//         {/* html내부에 required : true 를 안하는 이유. 오래된 브라우저나 개발자창에서 해킹가능 */}\n//         <input {...register(\"email\", {\n//           required:\"Email is required\",\n//           pattern:{\n//             value: /^[A-Za-z0-9._%+-]+@naver.com$/,\n//             message: \"Only naver.com emails allowed\",\n//           },\n//         })} placeholder=\"Email\" />\n//         <span>\n//           {errors?.email?.message}\n//         </span>\n//         <input {...register(\"firstName\", {required:\"write here\", minLength:10})} placeholder=\"First Name\" />\n//         <span>\n//           {errors?.firstName?.message}\n//         </span>\n//         <input {...register(\"lastName\", {\n//           required:\"write here\", \n//           minLength:5,\n//           validate:(value)=> !value.includes('e')})} \n//           placeholder=\"Last Name\" />\n//         <span>\n//           {errors?.lastName?.message}\n//         </span>\n//         <input {...register(\"username\", {required:\"write here\", minLength:5})} placeholder=\"Username\" />\n//         <span>\n//           {errors?.username?.message}\n//         </span>\n//         <input {...register(\"password\", {required:\"write here\"})} placeholder=\"Password\" />\n//         <span>\n//           {errors?.password?.message}\n//         </span>\n//         <input {...register(\"password1\", {\n//               required:\"Password is required\",\n//               minLength:{\n//                 value:5,\n//                 message:\"Your password is too short\"\n//               },\n//         })} type=\"password\"\n//         placeholder=\"Password1\" />\n//         <span>\n//           {errors?.password1?.message}\n//         </span>\n//         <button>Add</button>\n//         <span>\n//           {errors?.extraError?.message}\n//         </span>\n//       </form>\n//     </div>\n//   )\n// }","import { atom } from \"recoil\";\nimport { loadFromLocalStorage, saveToLocalStorage } from \"../../utils/localStorage\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\"\n}\n\nexport const categoriesState = atom<string[]>({\n  key: \"categoriesState\",\n  default: loadFromLocalStorage(\"categoriesState\", [Categories.TO_DO, Categories.DOING, Categories.DONE]),\n  effects: [\n    ({ onSet }) => {\n      onSet((category) => {\n        saveToLocalStorage(\"categoriesState\", category); // 상태 변경 시 로컬스토리지에 저장\n      });\n    },\n  ],\n})\n\n\n","export const saveToLocalStorage = (key: string, value: any) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\nexport const loadFromLocalStorage = <T>(key: string, defaultValue: T): T => {\n  const storedValue = localStorage.getItem(key);\n  return storedValue ? JSON.parse(storedValue) : defaultValue;\n};"],"names":["atom","key","default","toDoState","loadFromLocalStorage","effects","_ref","onSet","toDo","saveToLocalStorage","toDoSelector","selector","get","_ref2","toDos","category","categoryState","filter","Categories","TO_DO","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","register","handleSubmit","setValue","useForm","_jsxs","onSubmit","console","log","prev","id","length","text","children","_jsx","required","placeholder","ToDo","categories","categoriesState","onClick","event","currentTarget","name","targetIndex","findIndex","newToDo","slice","cat","map","ToDoList","setCategory","useRecoilState","value","onInput","Link","to","DOING","DONE","localStorage","setItem","JSON","stringify","defaultValue","storedValue","getItem","parse"],"sourceRoot":""}